<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Thomas Spurden&#x27;s blog</title>
	<link href="https://thomas.spurden.name/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://thomas.spurden.name"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-01-09T00:00:00+00:00</updated>
	<id>https://thomas.spurden.name/atom.xml</id>
	<entry xml:lang="en">
		<title>Capturing the Gameboy LCD with an FPGA (Part 2) - Compression</title>
		<published>2021-01-09T00:00:00+00:00</published>
		<updated>2021-01-09T00:00:00+00:00</updated>
		<link href="https://thomas.spurden.name/blog/capturing-gb-lcd-part2/" type="text/html"/>
		<id>https://thomas.spurden.name/blog/capturing-gb-lcd-part2/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd-part2&#x2F;mario-intro.gif&quot; alt=&quot;Mario&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;aside&gt;&lt;p&gt;This GIF is about 16% too slow (50fps, should be 60fps) due to the low precision of the gif
frame duration.&lt;&#x2F;p&gt;
&lt;&#x2F;aside&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;&quot;&gt;Part 1&lt;&#x2F;a&gt; I explain how to capture the
pixels being sent from the Gameboy GPU to the LCD. The FPGA board I&#x27;m using
(&lt;a href=&quot;http:&#x2F;&#x2F;papilio.cc&#x2F;index.php?n=Papilio.PapilioPro&quot;&gt;Papilio Pro&lt;&#x2F;a&gt;) is sending the captured data back to the PC via 2Mbaud serial
(over USB). This isn&#x27;t fast enough to stream frames in real time so only a about
15 frames would be captured and transmitted before the buffer on the FPGA
overflowed.&lt;&#x2F;p&gt;
&lt;p&gt;So I implemented a simple lossless compressor to reduce the required data rate.
The compressor is line-based: it chooses a reference line from the previous
frame and only transmits the differences between that reference line and the
current line. This introduces a fixed overhead of one byte per line to encode
the location of the reference line and how the differences are encoded. But
generally the lines are compressed by much more than one byte!&lt;&#x2F;p&gt;
&lt;p&gt;See the &lt;a href=&quot;https:&#x2F;&#x2F;git.sr.ht&#x2F;%7Eshiny&#x2F;gbcap&quot;&gt;gbcap&lt;&#x2F;a&gt; project for the code!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compression-details&quot;&gt;Compression details&lt;&#x2F;h2&gt;
&lt;p&gt;The compressor can encode offsets in x &amp;amp; y between -4 and 4 pixels. This allows
the reference line to be between 4 lines above and 4 lines below the line being
compressed in the previous frame. It also allows the reference line to be
shifted left or right by up to 4 pixels (0 pixels are shifted in to fill the
gap).&lt;&#x2F;p&gt;
&lt;p&gt;A per-line prefix byte determines the encoding used for the line, of which there
are three:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A prefix byte of &lt;code&gt;0xFF&lt;&#x2F;code&gt; means the line could not be compressed, there is no
reference line and the next 40 bytes are the line data verbatim&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Otherwise the 7 least-significant bits of the prefix byte encode the offset of
the reference line, and the most-significant bit encodes whether the match is
exact. The offset is encoded in the range 0..89 (so these two encodings do not
overlap with the &lt;code&gt;0xFF&lt;&#x2F;code&gt; encoding) by biasing both offsets by 4 to place them
in the range 0..9, multiplying the x offset by 9 and adding the y offset (that
is: ((x + 4) * 9) + (y + 4)).&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For an exact match (most-significant bit is set) the reference line is output
verbatim.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;For a non-exact match (most-significant bit is not set) the prefix byte is
followed by a 5-byte bitmask which encodes which of the 40 bytes of the
reference line should be output. For every 0 in the mask a byte is read from the
compressed stream and output, for every 1 in the mask a byte is read from the
reference line and output.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The compressor selects the reference line with the highest number of matches. If
there aren&#x27;t any reference lines with more than 5 matching bytes then the
compressor will output a no-match (&lt;code&gt;0xFF&lt;&#x2F;code&gt; prefix) line as that consumes fewer
bytes than transmitting the mask and non-matching bytes in that case.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Capturing the Gameboy LCD with an FPGA (Part 1)</title>
		<published>2020-08-08T00:00:00+00:00</published>
		<updated>2020-08-08T00:00:00+00:00</updated>
		<link href="https://thomas.spurden.name/blog/capturing-gb-lcd/" type="text/html"/>
		<id>https://thomas.spurden.name/blog/capturing-gb-lcd/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;title.png&quot; alt=&quot;Super Mario Land 2: 6 Golden Coins title screen&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;jump.png&quot; alt=&quot;Mario jumping&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;rock.png&quot; alt=&quot;Mario about to dodge a rock&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;mario_underwater.png&quot; alt=&quot;Mario underwater&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;lemmings.png&quot; alt=&quot;Lemmings title screen&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;mario_and_yoshi.png&quot; alt=&quot;Mario and Yoshi title screen&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;xenon_ii.png&quot; alt=&quot;Xenon II&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd&#x2F;mario-fly.gif&quot; alt=&quot;Mario flying&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Update: see also &lt;a href=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd-part2&#x2F;&quot;&gt;Part 2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are 6 important outputs from the Gameboy main processor to the LCD for
capturing the pixels:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pixel data &lt;code&gt;D0&lt;&#x2F;code&gt; and &lt;code&gt;D1&lt;&#x2F;code&gt; (50: &lt;code&gt;LD0&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;DATA0&lt;&#x2F;code&gt;, 51: &lt;code&gt;LD1&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;DATA1&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Pixel clock &lt;code&gt;CLK&lt;&#x2F;code&gt; (53: &lt;code&gt;CP&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;CLOCK&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Line latch &lt;code&gt;CPL&lt;&#x2F;code&gt; (55: &lt;code&gt;CPL&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;DATALCH&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Horizontal sync &lt;code&gt;HSYNC&lt;&#x2F;code&gt; (54: &lt;code&gt;ST&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;HORSYNC&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Vertical sync &lt;code&gt;VSYNC&lt;&#x2F;code&gt; (57: &lt;code&gt;S&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;VERTSYN&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In brackets I&#x27;ve put the names and pin numbers for these signals from the
&lt;a href=&quot;http:&#x2F;&#x2F;www.devrs.com&#x2F;gb&#x2F;files&#x2F;gameboy1.gif&quot;&gt;Gameboy schematic&lt;&#x2F;a&gt;. You can tell these are the ones required as they are the
ones connected to the ICD2-R chip on the SGB (&lt;a href=&quot;http:&#x2F;&#x2F;www.devrs.com&#x2F;gb&#x2F;files&#x2F;sgb.gif&quot;&gt;SGB schematic&lt;&#x2F;a&gt;). Although only
&lt;code&gt;D0&lt;&#x2F;code&gt;, &lt;code&gt;D1&lt;&#x2F;code&gt;, &lt;code&gt;CLK&lt;&#x2F;code&gt; and &lt;code&gt;CPL&lt;&#x2F;code&gt; are strictly required. &lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t forget that the Gameboy is 5 volt TTL: do NOT connect these directly to a
non-5v tolerant input! I am using a &lt;a href=&quot;http:&#x2F;&#x2F;papilio.cc&#x2F;index.php?n=Papilio.PapilioPro&quot;&gt;Papilio Pro&lt;&#x2F;a&gt; FPGA development board with an
&lt;a href=&quot;http:&#x2F;&#x2F;papilio.cc&#x2F;index.php?n=Papilio.16-bitIOBufferWing&quot;&gt;IO Buffer wing&lt;&#x2F;a&gt; to handle the logic level conversion. I have soldered an old
IDE ribbon cable to the pins of the ribbon cable which connects the main board
to the LCD board of the Gameboy.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;gb_and_fpga.jpg&quot;&gt;&lt;img src=&quot;gb_and_fpga.jpg&quot; alt=&quot;Gameboy connected to FPGA&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
    &lt;figcaption&gt;Gameboy connected to FPGA&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The pins to connect to are shown quite well in this image from the
&lt;a href=&quot;http:&#x2F;&#x2F;www.flashingleds.net&#x2F;nintendOscope&#x2F;nintendoscope.html&quot;&gt;Nintendoscope&lt;&#x2F;a&gt; project:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;nintendoscope_pinout.jpg&quot;&gt;&lt;img src=&quot;nintendoscope_pinout.jpg&quot; alt=&quot;LCD ribbon cable pins&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
    &lt;figcaption&gt;Original source &lt;a href=&quot;http:&#x2F;&#x2F;www.flashingleds.net&#x2F;nintendOscope&#x2F;nintendoscope.html&quot;&gt;Nintendoscope&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;For testing I captured the signals using my &lt;a href=&quot;http:&#x2F;&#x2F;papilio.cc&#x2F;index.php?n=Papilio.PapilioPro&quot;&gt;Papilio Pro&lt;&#x2F;a&gt; as a logic analyser
with the &lt;a href=&quot;http:&#x2F;&#x2F;dangerousprototypes.com&#x2F;docs&#x2F;Open_Bench_Logic_Sniffer&quot;&gt;Open Bench Logic Sniffer&lt;&#x2F;a&gt; bitfile and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tcrs&#x2F;sump-dump&quot;&gt;sump-dump&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;.&#x2F;sump-dump &#x2F;dev&#x2F;ttyUSB1 groups 1 trigger 0x20=0x20 divisor 10 vcd data=0x3 vcd clk=0x4 vcd hsync=0x10 vcd vsync=0x20 vcd cpl=0x40 vcd c=0x80
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The signal buffer isn&#x27;t large enough to capture a whole frame, it can only store
about a third of a frame.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;waves-2frames.png&quot;&gt;&lt;img src=&quot;waves-2frames.png&quot; alt=&quot;Logic analyser capture of two lines of pixels&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
    &lt;figcaption&gt;First two lines of a frame (&lt;a href=&quot;6coins-title.vcd&quot;&gt;vcd&lt;&#x2F;a&gt;)&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;figure&gt;
    &lt;a href=&quot;waves-end-of-frame.png&quot;&gt;&lt;img src=&quot;waves-end-of-frame.png&quot; alt=&quot;Logic analyser capture of the end of a frame&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
    &lt;figcaption&gt;Last few lines of a frame (&lt;a href=&quot;frame-end.vcd&quot;&gt;vcd&lt;&#x2F;a&gt;)&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;aside&gt;&lt;p&gt;These captures are both from the title screen of &amp;quot;Super Mario Land 2: 6 Golden
Coins&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;aside&gt;
&lt;p&gt;The behaviour of these signals is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Frame starts on the rising edge of &lt;code&gt;VSYNC&lt;&#x2F;code&gt;, which is held high for the first
line of the frame.&lt;&#x2F;li&gt;
&lt;li&gt;Each line of the frame starts on the rising edge of &lt;code&gt;HSYNC&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Pixels are generated from left-to-right from the Gameboy CPU.&lt;&#x2F;li&gt;
&lt;li&gt;Pixel data is shifted into a 159 pixel (159x2 bits) shift register from &lt;code&gt;D0&lt;&#x2F;code&gt;
&amp;amp; &lt;code&gt;D1&lt;&#x2F;code&gt; on the rising edge of &lt;code&gt;CLK&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Note that &lt;code&gt;CLK&lt;&#x2F;code&gt; does not run at a constant rate, some pixels are generated
but the corresponding pulse of &lt;code&gt;CLK&lt;&#x2F;code&gt; is suppressed so they are discarded.
This is how the Gameboy implements fine (1-7) pixel background and window
offsets (and possibly other effects).&lt;&#x2F;li&gt;
&lt;li&gt;A whole line of pixels is latched into the LCD drivers on the rising edge of
&lt;code&gt;CPL&lt;&#x2F;code&gt;. The pixels latched are the 159 from the shift register plus the values
from &lt;code&gt;D0&lt;&#x2F;code&gt; and &lt;code&gt;D1&lt;&#x2F;code&gt; (to make up 160 pixels). This also signals the end of each
line, making &lt;code&gt;HSYNC&lt;&#x2F;code&gt; a bit redundant.&lt;&#x2F;li&gt;
&lt;li&gt;At the end of each frame there are a few lines with no &lt;code&gt;CLK&lt;&#x2F;code&gt; pulses but a
&lt;code&gt;CPL&lt;&#x2F;code&gt; pulse, these don&#x27;t have any effect on the display (as they will just
latch exactly the same data into the LCD drivers each time). This could be
used to detect the end of frame without having to use &lt;code&gt;VSYNC&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In the logic captures I have looked at there is 160 rising edges of &lt;code&gt;CLK&lt;&#x2F;code&gt;, so
the first pixel generated (which always seems to be when &lt;code&gt;HSYNC&lt;&#x2F;code&gt; is high) is
actually discarded as it shifts off the end of the shift register before the
row is latched into the LCD drivers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The pixel data changes &lt;em&gt;very&lt;&#x2F;em&gt; soon after the rising edge of &lt;code&gt;CLK&lt;&#x2F;code&gt; for the next
pixel - so soon that to the logic analyser it appears to happen at the same time
as the rising edge. So I actually capture the &lt;code&gt;D0&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;D1&lt;&#x2F;code&gt; values from the cycle
&lt;em&gt;before&lt;&#x2F;em&gt; the rising edge is detected.&lt;&#x2F;p&gt;
&lt;p&gt;Capturing &lt;code&gt;D0&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;D1&lt;&#x2F;code&gt; on the falling edge of &lt;code&gt;CLK&lt;&#x2F;code&gt; seems to be widely reported
as the correct thing to do, but this will capture the whole frame shifted left
by one pixel. It is definitely easier though, so if you are happy with 159
pixels it is a decent approach.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hardware&quot;&gt;Hardware&lt;&#x2F;h2&gt;
&lt;p&gt;Used &lt;a href=&quot;https:&#x2F;&#x2F;m-labs.hk&#x2F;gateware&#x2F;migen&#x2F;&quot;&gt;migen&lt;&#x2F;a&gt; to build hardware, available here: &lt;a href=&quot;https:&#x2F;&#x2F;git.sr.ht&#x2F;%7Eshiny&#x2F;gbcap&quot;&gt;gbcap&lt;&#x2F;a&gt;. It&#x27;s set up to build
for the Papilio Pro, will require some changes to build with other FPGA boards.&lt;&#x2F;p&gt;
&lt;p&gt;This code sets up the pin assignment (from &lt;code&gt;gbcap.py&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt; plat.add_extension([
 (&#x27;gb_lcd&#x27;, 0,
     Subsignal(&#x27;vsync&#x27;, Pins(&#x27;B:5&#x27;)),
     Subsignal(&#x27;hsync&#x27;, Pins(&#x27;B:4&#x27;)),
     Subsignal(&#x27;cpl&#x27;, Pins(&#x27;B:6&#x27;)),
     Subsignal(&#x27;clk&#x27;, Pins(&#x27;B:2&#x27;)),
     Subsignal(&#x27;pixel&#x27;, Pins(&#x27;B:0&#x27;, &#x27;B:1&#x27;)))])
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;i.e. &lt;code&gt;D0&lt;&#x2F;code&gt; should be connected to pin 0 of the B wing header, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;Once the bitfile is programmed onto your FPGA it will wait for a byte to be
received over the UART and then start capturing frames. You can grab these
using the &lt;code&gt;recv.py&lt;&#x2F;code&gt; script in the git repo, it will dump out pgm files.&lt;&#x2F;p&gt;
&lt;p&gt;The UART is only running at 2Mbaud in the current design, which is not fast
enough to stream the Gameboy frame captures in real-time (that would require
60 * 160 * 144 * 2 = 2764800 bits per second), so you will only get a few frames
before it stops due to FIFO overflow. &lt;strong&gt;Update: I now have real-time streaming,
see &lt;a href=&quot;https:&#x2F;&#x2F;thomas.spurden.name&#x2F;blog&#x2F;capturing-gb-lcd-part2&#x2F;&quot;&gt;Part 2&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;previous-work&quot;&gt;Previous Work&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;svendahlstrand&#x2F;game-boy-lcd-sniffing&quot;&gt;lcd sniffing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.flashingleds.net&#x2F;nintendOscope&#x2F;nintendoscope.html&quot;&gt;nintendoscope&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.kevtris.org&#x2F;blogfiles&#x2F;Nitty%20Gritty%20Gameboy%20VRAM%20Timing.txt&quot;&gt;nitty gritty gameboy vram timing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Run dhcp on all ethernet devices</title>
		<published>2020-07-10T00:00:00+00:00</published>
		<updated>2020-07-10T00:00:00+00:00</updated>
		<link href="https://thomas.spurden.name/blog/dhcp-all-ethernet/" type="text/html"/>
		<id>https://thomas.spurden.name/blog/dhcp-all-ethernet/</id>
		<content type="html">&lt;p&gt;My laptop doesn&#x27;t have a built-in ethernet controller (WiFi only). I want all
Ethernet devices to be dhcp-ed automatically, as soon as they appear (USB
tethering phone, USB-to-ethernet adaptor). But I don&#x27;t want to mess up the
configuration for my WiFi card.&lt;&#x2F;p&gt;
&lt;p&gt;Lightly modified &lt;code&gt;&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;dhcpcd.service&lt;&#x2F;code&gt; (Arch Linux)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;[Unit]
Description=dhcpcd on all en* interfaces
Wants=network.target
Before=network.target

[Service]
Type=forking
PIDFile=&#x2F;run&#x2F;dhcpcd&#x2F;pid
# Only allow ethernet devices, ignore unrenamed devices as udev
# will (try to) rename them whilst dhcpcd is fiddling with them
ExecStart=&#x2F;usr&#x2F;bin&#x2F;dhcpcd -q -b --allowinterfaces &#x27;en*&#x27; --denyinterfaces &#x27;eth*&#x27;
ExecStop=&#x2F;usr&#x2F;bin&#x2F;dhcpcd -x

[Install]
WantedBy=multi-user.target
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Put this in &lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;dhcpcd-all-en.service&lt;&#x2F;code&gt; and run&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;systemctl daemon-reload
systemctl enable --now dhcpcd-all-en
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Autologin and start X11</title>
		<published>2020-04-13T00:00:00+00:00</published>
		<updated>2020-04-13T00:00:00+00:00</updated>
		<link href="https://thomas.spurden.name/blog/autostartx/" type="text/html"/>
		<id>https://thomas.spurden.name/blog/autostartx/</id>
		<content type="html">&lt;p&gt;I have full disk encryption enabled and so don&#x27;t want to have to type my disk
encryption password and then log in as my user immediately afterwards.&lt;&#x2F;p&gt;
&lt;p&gt;Install &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joukewitteveen&#x2F;xlogin&quot;&gt;xlogin&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For Arch Linux it&#x27;s in the &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;xlogin&#x2F;&quot;&gt;AUR&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;systemctl enable xlogin@username
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I found that this would not work, X wouldn&#x27;t actually start. Examining the logs
in &lt;code&gt;&#x2F;var&#x2F;log&#x2F;Xorg.0.log&lt;&#x2F;code&gt; (or &lt;code&gt;&#x2F;var&#x2F;log&#x2F;Xorg.0.log.old&lt;&#x2F;code&gt; if you manually start X
before digging around) I could see that X11 couldn&#x27;t find any display outputs.
So I added a kludge: in &lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;x@.service.d&#x2F;wait.conf&lt;&#x2F;code&gt; (which you
will need to create):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;[Service]
ExecStartPre=&#x2F;bin&#x2F;sleep 3
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s probably a better way to do this - maybe the x service needs some
dependency it doesn&#x27;t have? But this has worked fine for me for a long time.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Building a custom keyboard</title>
		<published>2019-07-18T00:00:00+00:00</published>
		<updated>2019-07-18T00:00:00+00:00</updated>
		<link href="https://thomas.spurden.name/blog/custom-keyboard/" type="text/html"/>
		<id>https://thomas.spurden.name/blog/custom-keyboard/</id>
		<content type="html">&lt;p&gt;I made a custom keyboard design, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tcrs&#x2F;ergosnap&quot;&gt;ErgoSnap&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;ergosnap_v1.1.jpg&quot;&gt;&lt;img src=&quot;ergosnap_v1.1.jpg&quot; alt=&quot;Final constructed ErgoSnap rev1.1 board&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
    
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;backstory&quot;&gt;Backstory&lt;&#x2F;h2&gt;
&lt;p&gt;A while ago I built an &lt;a href=&quot;https:&#x2F;&#x2F;keeb.io&#x2F;products&#x2F;iris-keyboard-split-ergonomic-keyboard&quot;&gt;Iris keyboard&lt;&#x2F;a&gt; from a kit because I wanted to try
a split layout. I&#x27;m pretty happy with it but after using it for a few months
decided I would like a few more keys. I had a look at what else was available,
and after spending a lot of time on the internet decided that the layout of the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;omkbd&#x2F;ErgoDash&quot;&gt;ErgoDash&lt;&#x2F;a&gt; looked good. I liked the construction of the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;reversebias&#x2F;mitosis-hardware&quot;&gt;Mitosis&lt;&#x2F;a&gt; using a single PCB design for both the mounting plate and the
actual PCB the switches are soldered to; however I didn&#x27;t want a wireless
keyboard and wanted to stick with the &lt;a href=&quot;https:&#x2F;&#x2F;qmk.fm&#x2F;&quot;&gt;QMK&lt;&#x2F;a&gt; firmware. So I decided to adapt
the ErgoDash design to use the Mitosis construction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;construction&quot;&gt;Construction&lt;&#x2F;h2&gt;
&lt;p&gt;Since I was designing my own keyboard I can tailor it to my requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tenting built in. Just need two M6 mounting holes on the inside edge of the board&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t care about any kind of lighting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I chose to use the diode mounting holes in the keyswitches - these are wider
than the LED mounting holes (but in the same location on the keyswitch). They
are in the Cherry MX &lt;a href=&quot;http:&#x2F;&#x2F;switches-sensors.zf.com&#x2F;wp-content&#x2F;uploads&#x2F;2012&#x2F;07&#x2F;Keymodule_MX_EN.pdf&quot;&gt;datasheet&lt;&#x2F;a&gt; (found by searching around on the internet). I&#x27;m
using &lt;a href=&quot;https:&#x2F;&#x2F;zealpc.net&#x2F;products&#x2F;zealio&quot;&gt;Zealios&lt;&#x2F;a&gt; and the ones I&#x27;ve got definitely have the diode holes. This
simplified routing as the diode overlaps the switch.&lt;&#x2F;p&gt;
&lt;p&gt;I created a custom component and footprint with the keyswitch, diode and cutouts
for snapout section (for the mounting plate PCB). Added a chin at the top for
the ProMicro, used the reversible ProMicro footprint from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Biacco42&#x2F;Ergo42&quot;&gt;Ergo42&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ordered PCBs from JLC PCB:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;keyboard-rev1-top-both.jpg&quot;&gt;&lt;img src=&quot;keyboard-rev1-top-both.jpg&quot; alt=&quot;Top view of both halves of the revision 1 ErgoSnap PCB&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
    
&lt;&#x2F;figure&gt;
&lt;figure&gt;
    &lt;a href=&quot;keyboard-rev1-side-view.jpg&quot;&gt;&lt;img src=&quot;keyboard-rev1-side-view.jpg&quot; alt=&quot;Side view of stacked Rev 1 ErgoSnap PCB with a couple of keyswitches&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;First set of PCBs arrived and looked good, but...&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;a href=&quot;keyboard-rev1-diode-holes.jpg&quot;&gt;&lt;img src=&quot;keyboard-rev1-diode-holes.jpg&quot; alt=&quot;Closeup of keyswitch and PCB showing misaligned holes for diode legs&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
    
&lt;&#x2F;figure&gt;
&lt;p&gt;the holes for the diode legs were not the right distance apart! Whoops. Luckily
PCBs are pretty cheap so a couple of weeks later I had revised boards. Only a
few mistakes remain now. See the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tcrs&#x2F;ergosnap&quot;&gt;ErgoSnap&lt;&#x2F;a&gt; github repo for more info.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Getting started using the STM32 platform</title>
		<published>2018-02-28T00:00:00+00:00</published>
		<updated>2018-02-28T00:00:00+00:00</updated>
		<link href="https://thomas.spurden.name/blog/stm-start/" type="text/html"/>
		<id>https://thomas.spurden.name/blog/stm-start/</id>
		<content type="html">&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tcrs&#x2F;stm-start&quot;&gt;this GitHub repo&lt;&#x2F;a&gt; for the related code
(and a copy of this post).&lt;&#x2F;p&gt;
&lt;p&gt;I have an &lt;a href=&quot;http:&#x2F;&#x2F;wiki.seeedstudio.com&#x2F;wiki&#x2F;Arch_Max&quot;&gt;Arch Max&lt;&#x2F;a&gt; STM32F4 development board. Although it &lt;a href=&quot;https:&#x2F;&#x2F;developer.mbed.org&#x2F;platforms&#x2F;Seeed-Arch-Max&#x2F;&quot;&gt;supports
mbed&lt;&#x2F;a&gt; I like to understand how things work...&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;www.st.com&#x2F;resource&#x2F;en&#x2F;datasheet&#x2F;dm00037051.pdf&quot;&gt;datasheet&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;www.st.com&#x2F;resource&#x2F;en&#x2F;reference_manual&#x2F;dm00031020.pdf&quot;&gt;reference manual&lt;&#x2F;a&gt; have all the required
low-level hardware info. This guide will get you started compiling C programs to
directly twiddle with the stuff from the reference manual.&lt;&#x2F;p&gt;
&lt;p&gt;I experimented with two ways to get started on the board: CMSIS and libopencm3.
I preferred libopencm3 and that&#x27;s what I&#x27;m using now, but have included examples
using both. The toolchain and debugging stuff is the same between the two.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;toolchain&quot;&gt;Toolchain&lt;&#x2F;h2&gt;
&lt;p&gt;On Arch Linux, just install the &lt;code&gt;arm-none-eabi-gcc&lt;&#x2F;code&gt; and &lt;code&gt;arm-none-eabi-newlib&lt;&#x2F;code&gt;
packages. Most other distros probably offer similarly named packages.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;openocd&quot;&gt;OpenOCD&lt;&#x2F;h1&gt;
&lt;p&gt;An &lt;code&gt;openocd&lt;&#x2F;code&gt; config file is provided in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Seeed-Studio&#x2F;Arch_Max.git&quot;&gt;Arch Max git repo&lt;&#x2F;a&gt;.
Then running &lt;code&gt;openocd -f Arch_Max&#x2F;arch_max.cfg&lt;&#x2F;code&gt; with the board connected to a
USB port should pick it up and provide a GDB server on port &lt;code&gt;3333&lt;&#x2F;code&gt;. I have to
run OpenOCD as root as it needs access to the &lt;code&gt;&#x2F;dev&#x2F;hidraw0&lt;&#x2F;code&gt; device node to
communicate with the board.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;gdb&quot;&gt;GDB&lt;&#x2F;h1&gt;
&lt;p&gt;Once OpenOCD is running and connected to the board via USB &lt;code&gt;gdb&lt;&#x2F;code&gt; can be
connected and used to run and debug binaries. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fdf6e3;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;arm-none-eabi-gdb -x load.gdb binary.elf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The gdb script &lt;code&gt;load.gdb&lt;&#x2F;code&gt; will connect to the OpenOCD gdb server, reset the
board and load the elf file into memory. You can continue (&lt;code&gt;c&lt;&#x2F;code&gt;) at the GDB
prompt to just run the program. For debugging you can set breakpoints etc before
running too.&lt;&#x2F;p&gt;
&lt;p&gt;TOOD:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;how to program an image into flash&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h1&gt;
&lt;p&gt;Both the libopencm3 and the CMSIS examples will produce a binary which when run
on the Arch Max board will blink the LED next to the ethernet port (GPIO B3).&lt;&#x2F;p&gt;
&lt;p&gt;The Makefiles in both examples will link an elf executable file, which is
suitable for debugging and loading via GDB (see above). A further &lt;code&gt;objcopy -O binary&lt;&#x2F;code&gt; step (also shown in the Makefiles) provides a file suitable for flashing
onto the chip&#x27;s flash memory (I think - I&#x27;ve not got around to actually trying
this yet!).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-libopencm3&quot;&gt;Using libopencm3&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;libopencm3.org&#x2F;&quot;&gt;libopencm3&lt;&#x2F;a&gt; project provide an free software library which is
in many ways similar to CMSIS, but I found it easier to get started with and it
is what I use for projects now. Note that despite the name it also supports a
large range of Cortex-M4 devices!&lt;&#x2F;p&gt;
&lt;p&gt;There is an awk script (&lt;code&gt;libopencm3&#x2F;scripts&#x2F;gnlink.awk&lt;&#x2F;code&gt;) which can generate the
required C flags and linker script for a device, see
&lt;code&gt;example-libopencm3&#x2F;Makefile&lt;&#x2F;code&gt; for usage.&lt;&#x2F;p&gt;
&lt;p&gt;The generated linker script sets the executable entry point to &lt;code&gt;reset_handler&lt;&#x2F;code&gt;
which can be found in &lt;code&gt;libopencm3&#x2F;lib&#x2F;cm3&#x2F;vector.c&lt;&#x2F;code&gt;. This is pretty minimal:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;clears the BSS&lt;&#x2F;li&gt;
&lt;li&gt;makes sure the stack is aligned correctly&lt;&#x2F;li&gt;
&lt;li&gt;calls pre_main, which may do chip-specific init. For the STM32F4 boards it
just enabled access to the floating point unit&lt;&#x2F;li&gt;
&lt;li&gt;calls global constructors&lt;&#x2F;li&gt;
&lt;li&gt;calls main() - provided by you!&lt;&#x2F;li&gt;
&lt;li&gt;calls global destructors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that the clocks are left in their reset state. In the example I have
set them up (using the &lt;code&gt;rcc_clock_setup_hse_3v3&lt;&#x2F;code&gt; function) to run at 168MHz. The
settings there are correct for the Arch Max (I hope!) as it has a high-speed
external (hse) 8MHz oscillator.&lt;&#x2F;p&gt;
&lt;p&gt;Using the functions in libopencm3 to do simple things like toggling the GPIO is
probably rather wasteful as they each incur a function call overhead. If you are
worried about this then you can build the libopencm3 library and your binary
with link-time optimisation (LTO), which will inline any small functions the
compiler thinks is wise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-cmsis&quot;&gt;Using CMSIS&lt;&#x2F;h2&gt;
&lt;p&gt;I found it very difficult to find the CMSIS code. It turns out the best way to
get hold of it for a platform with mbed support (which is quite a lot, including
the Arch Max) is to just grab the mbed source code from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ARMmbed&#x2F;mbed-os.git&quot;&gt;mbed-os GitHub
repo&lt;&#x2F;a&gt;. The repository contains lots of stuff for mbed and mbed-os, but the
interesting CMSIS code is in the &lt;code&gt;targets&lt;&#x2F;code&gt; folder.&lt;&#x2F;p&gt;
&lt;p&gt;Each supported chip has a folder containing a chip-specific startup assembly
file. For the Arch Max this is in &lt;code&gt;mbed-os&#x2F;targets&#x2F;TARGET_STM&#x2F;TARGET_STM32F4&#x2F;TARGET_STM32F407xG&#x2F;device&#x2F;TOOLCHAIN_GCC_ARM&#x2F;startup_stm32f407xx.S&lt;&#x2F;code&gt;
This assembly file contains the entry point (&lt;code&gt;Reset_Handler&lt;&#x2F;code&gt;) and quite well
documented with comments - it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sets up the stack&lt;&#x2F;li&gt;
&lt;li&gt;Copies data segment from flash to RAM&lt;&#x2F;li&gt;
&lt;li&gt;Calls &lt;code&gt;SystemInit&lt;&#x2F;code&gt; to init clock and other basic hardware init&lt;&#x2F;li&gt;
&lt;li&gt;Calls &lt;code&gt;_start&lt;&#x2F;code&gt; (which is the libc entry point that will call main)&lt;&#x2F;li&gt;
&lt;li&gt;Provides the interrupt vector table
&lt;ul&gt;
&lt;li&gt;Default handler just enters an infinite loop&lt;&#x2F;li&gt;
&lt;li&gt;Set up to have a weak symbol for each interrupt, aliased to the default one&lt;&#x2F;li&gt;
&lt;li&gt;Can easily provide an interrupt handler by just creating a function of the
correct name (e.g. &lt;code&gt;EXTI0_IRQHandler&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the same folder as the startup &lt;code&gt;.S&lt;&#x2F;code&gt; file there should be a linker script
(&lt;code&gt;.ld&lt;&#x2F;code&gt;) which should be passed to the linker with the &lt;code&gt;-T&lt;&#x2F;code&gt; option. This is also
quite well commented.&lt;&#x2F;p&gt;
&lt;p&gt;An implementation of &lt;code&gt;SystemInit&lt;&#x2F;code&gt; for the Arch Max is provided
(&lt;code&gt;mbed-os&#x2F;targets&#x2F;TARGET_STM&#x2F;TARGET_STM32F4&#x2F;TARGET_STM32F407xG&#x2F;TARGET_ARCH_MAX&#x2F;system_stm32f4xx.c&lt;&#x2F;code&gt;)
which sets up the system clock and various other bits and bobs. This
implementation calls into the HAL library (sources for which can be found at
&lt;code&gt;mbed-os&#x2F;targets&#x2F;TARGET_STM&#x2F;TARGET_STM32F4&#x2F;device&#x2F;&lt;&#x2F;code&gt;). I have provided a chopped
down version &lt;code&gt;system_light.c&lt;&#x2F;code&gt; which does not depend on the HAL library.&lt;&#x2F;p&gt;
&lt;p&gt;The mbed files for your board should have some clues as to what pins are
connected to the odd LEDs etc. which are probably on your board. For the Arch
Max that was in
&lt;code&gt;mbed-os&#x2F;targets&#x2F;TARGET_STM&#x2F;TARGET_STM32F4&#x2F;TARGET_STM32F407xG&#x2F;TARGET_ARCH_MAX&#x2F;PinNames.h&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;at the bottom &lt;code&gt;LED1&lt;&#x2F;code&gt; is set to &lt;code&gt;PB_3&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The provided &lt;code&gt;Makefile&lt;&#x2F;code&gt; shows the compiler&#x2F;linker options and include paths required.&lt;&#x2F;p&gt;
&lt;p&gt;See example in the &lt;code&gt;example-cmsis&lt;&#x2F;code&gt; folder (note you&#x27;ll need that checkout of
&lt;code&gt;mbed-os&lt;&#x2F;code&gt; - see the readme in the folder).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sergeev.io&#x2F;notes&#x2F;cortex_cmsis&#x2F;&quot;&gt;Good overview of CMSIS on the LPC devices&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;regalis.com.pl&#x2F;en&#x2F;arm-cortex-stm32-gnulinux&#x2F;&quot;&gt;Very useful tutorial&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;jeremyherbert.net&#x2F;get&#x2F;stm32f4_getting_started&quot;&gt;Useful tutorial on making a blinky&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;theanine.io&#x2F;notes&#x2F;cortex_cmsis&#x2F;&quot;&gt;Tutorial not really checked out yet&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
